from gi.repository import Gtk, WebKit
from views import widgets


class ApplicationWindow(Gtk.ApplicationWindow):

    def __init__(self, application, *args, **kwargs):
        self.application = application
        if not kwargs.get('application', None):
            kwargs['application'] = application
        super(ApplicationWindow, self).__init__(*args, **kwargs)

        # Metadata.
        self.set_wmclass('lightread', 'lightread')
        self.set_title('Lightread')
        self.set_default_size(1280, 1024)
        # We probably always want it maximized on start.
        self.maximize()
        # And we don't care about title bar. Very likely.
        self.set_hide_titlebar_when_maximized(True)

        # Adding widgets to window
        base_box = Gtk.VBox()
        self.add(base_box)

        self.toolbar = widgets.Toolbar()
        base_box.pack_start(self.toolbar, False, False, 0)
        # self.toolbar.reload_button.connect('clicked', self.show_prefs)

        main_view = Gtk.HPaned()
        base_box.pack_start(main_view, True, True, 0)

        side_view = widgets.Sidebar()
        main_view.pack1(side_view, True, False)

        # Webview in the left
        self.feedview = widgets.FeedView()
        self.feedview.load_uri('http://www.duckduckgo.com/')
        main_view.pack2(self.feedview.scrollwindow, True, False)
        main_view.set_position(1)

    def show_prefs(self, data=None):
        dialog = AboutDialog(self)
        dialog.show()


class PreferencesDialog(Gtk.Dialog):

    def __init__(self, parent, *args, **kwargs):
        super(PreferencesDialog, self).__init__(*args, **kwargs)
        self.set_modal(True)
        self.set_transient_for(parent)

        box = Gtk.HBox()
        label = Gtk.Label("hello')
        box.pack_start(

        self.add(box)


class AboutDialog(Gtk.AboutDialog):

    def __init__(self, parent, *args, **kwargs):
        super(AboutDialog, self).__init__(*args, **kwargs)
        self.set_modal(True)
        self.set_transient_for(parent)
